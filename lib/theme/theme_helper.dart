import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.lightBlue700,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              22,
            ),
          ),
          shadowColor: colorScheme.primary,
          elevation: 0,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: appTheme.gray400,
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.gray40001,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              9,
            ),
          ),
        ),
      ),
      textTheme: TextTheme(
        headlineLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: getFontSize(
            32,
          ),
          fontFamily: 'Trebuchet MS',
          fontWeight: FontWeight.w400,
        ),
        bodyLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Trebuchet MS',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.secondaryContainer,
          fontSize: getFontSize(
            15,
          ),
          fontFamily: 'Trebuchet MS',
          fontWeight: FontWeight.w400,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Trebuchet MS',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.lightBlue700,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Trebuchet MS',
          fontWeight: FontWeight.w400,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0XFF002878),
    error: Color(0XFF1C274C),
    errorContainer: Color(0XFFA38D8D),
    inversePrimary: Color(0XFF002878),
    inverseSurface: Color(0XFF1C274C),
    onBackground: Color(0XFFBFDBFE),
    onError: Color(0XFFBFDBFE),
    onErrorContainer: Color(0XFF002878),
    onInverseSurface: Color(0XFFBFDBFE),
    onPrimary: Color(0XFF1C274C),
    onPrimaryContainer: Color(0XFFBFDBFE),
    onSecondary: Color(0XFFBFDBFE),
    onSecondaryContainer: Color(0XFF002878),
    onSurface: Color(0XFFBFDBFE),
    onSurfaceVariant: Color(0XFF002878),
    onTertiary: Color(0XFFBFDBFE),
    onTertiaryContainer: Color(0XFF002878),
    outline: Color(0XFF1C274C),
    outlineVariant: Color(0XFF002878),
    primary: Color(0X3F000000),
    primaryContainer: Color(0XFF002878),
    scrim: Color(0XFF002878),
    secondary: Color(0XFF002878),
    secondaryContainer: Color(0XFFA38D8D),
    shadow: Color(0XFF1C274C),
    surface: Color(0XFF002878),
    surfaceTint: Color(0XFF1C274C),
    surfaceVariant: Color(0XFFA38D8D),
    tertiary: Color(0XFF002878),
    tertiaryContainer: Color(0XFFA38D8D),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // BlueGray
  Color get blueGray400 => Color(0XFF888888);
  // Cyan
  Color get cyan80099 => Color(0X9900789B);
  Color get cyan900 => Color(0XFF025578);
  // Gray
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFCCC9C9);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray500 => Color(0XFFB3A8A8);
  Color get gray5001 => Color(0XFFF8F8F8);
  Color get gray700 => Color(0XFF6B5E5E);
  Color get gray800 => Color(0XFF424242);
  // Indigo
  Color get indigo600 => Color(0XFF3B5998);
  // LightBlue
  Color get lightBlue700 => Color(0XFF0386D0);
  Color get lightBlue800 => Color(0XFF036BB9);
  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
